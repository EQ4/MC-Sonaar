#N canvas 569 22 976 646 10;
#X declare -path ../bin -path ../utils;
#X obj -4 -35 cnv 15 300 45 empty empty empty 20 12 0 14 -204786 -66577
0;
#X obj -237 153 cnv 15 235 35 empty empty empty 20 12 0 14 -204786
-66577 0;
#X obj -384 109 route list;
#X text -442 -108 =====================;
#X obj 13 72 timer;
#X obj 67 285 +;
#X obj 96 399 throw~ slices;
#X obj 96 377 *~;
#X obj 64 173 list split;
#X obj 92 264 sum;
#X obj 54 73 list;
#X obj 48 45 t b l;
#X obj -7 14 delay;
#X obj -7 37 t b b;
#X obj 101 242 s newEvent;
#X msg 12 -10 stop;
#X obj -7 -56 r newEvent;
#X obj 101 197 list split 1;
#X floatatom 107 219 7 0 0 0 - - -;
#X text 156 219 length of current chunk;
#X text 181 196 (elapsed time from previous onset detection);
#X msg -376 205 reset;
#X obj 94 122 listfind;
#X obj 90 69 t l l;
#X floatatom 140 163 5 0 0 0 - - -;
#X obj -384 251 t l l;
#X text 177 163 current slice;
#X obj 94 146 f;
#X obj 67 331 trapenv 2;
#X obj -340 288 list_value;
#X obj -283 242 euclidist;
#X floatatom -275 266 5 0 0 0 - - -;
#N canvas 1328 313 232 228 store-mfcc 0;
#X obj 42 49 inlet;
#X obj 61 150 outlet;
#X obj 61 122 list;
#X obj 44 93 route bang;
#X obj 128 37 loadbang;
#X obj 128 60 delay 1000;
#X connect 0 0 3 0;
#X connect 2 0 1 0;
#X connect 3 0 2 0;
#X connect 3 1 2 1;
#X connect 4 0 5 0;
#X connect 5 0 3 0;
#X restore -232 217 pd store-mfcc;
#X obj -232 158 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X text -334 307 [list_value] receives single values on the right inlet
and a list with onset times on its left inlet. The result is a new
list with the same indexes as the inter-onset times.;
#X obj -340 354 s euclidean_dist;
#X text -306 129 <- we take the mfcc's on the onsets;
#X text -238 265 euclidean distance;
#X obj 90 47 r euclidean_dist;
#X text 152 68 Here we find the lowest value in the list of euclidean
distances (which represent similar sounds) and play that slice back
until a better match comes in. The result tends to produce loops that
change over time as the audio comes in and out the buffer.;
#X floatatom 139 142 5 0 0 0 - - -;
#X text 179 141 minimum distance;
#X text -213 171 mfcc to compare to.;
#X obj -384 228 list_iot 5000;
#X obj -296 215 spigot 0;
#X msg -251 181 1;
#X text -212 155 (2) press to take an instantaneous;
#X text 36 -30 (3) PRESS BANG TO START SLICING THE INPUT!;
#X text -440 -94 This example attempts simple classification of the
detected onsets. It takes the mfcc's of the onsets (2048 points) and
calculates their euclidean distance to a user selected mfcc list. These
distances are then stored in a list synched with the onset times \,
so that we can use them to play back slices that are similar to the
selected mfcc.;
#X obj -404 168 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj -384 173 t b l l;
#X msg 2 -31 bang;
#X obj 81 94 minmax;
#X obj -327 378 catch~ slices;
#X obj -421 444 cnv 15 160 50 empty empty empty 20 12 0 14 -261234
-66577 0;
#X obj -413 450 output~;
#X obj -440 399 xfade~;
#X text -345 453 (1) DSP on;
#X text -345 470 (2) Volume up;
#X obj -384 354 s iots;
#X text -440 -116 4_simple-classification;
#X obj 48 24 r iots;
#X obj -384 130 route i.mfcc;
#X obj -444 -8 cnv 15 110 18 empty empty empty 20 12 0 14 -204786 -66577
0;
#X obj -440 35 tabplay2~ sample;
#X obj -440 -7 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X msg -420 14 loop \$1;
#X obj -420 -7 tgl 15 1 empty empty empty 17 7 0 10 -262144 -1 -1 1
1;
#X text -401 -8 (2) play!;
#X obj -336 36 cnv 15 280 18 empty empty empty 20 12 0 14 -204800 -66577
0;
#N canvas 1302 254 383 143 init 0;
#X obj -31 39 loadbang;
#X obj -31 101 soundfiler;
#X obj -31 123 table sample 4410;
#X obj -32 17 declare -path ../bin -path ../utils;
#X msg -31 60 read -resize ./OrenAmbarchi-AudienceOfOne-Salt.wav sample
\; sample normalize;
#X connect 0 0 4 0;
#X connect 4 0 1 0;
#X restore -432 376 pd init;
#X obj 67 354 delread~ deline;
#X obj -384 151 timegate 300;
#X obj 67 307 - 5.8;
#X text -333 36 Audio: Oren Ambarchi - Audience of One - Salt;
#X obj -430 88 essentiaRT~ 11.5;
#X obj -424 60 delwrite~ deline 5000;
#X connect 2 0 62 0;
#X connect 4 0 5 0;
#X connect 5 0 73 0;
#X connect 7 0 6 0;
#X connect 8 1 9 0;
#X connect 8 1 17 0;
#X connect 9 0 5 1;
#X connect 10 0 8 0;
#X connect 11 0 4 0;
#X connect 11 1 10 1;
#X connect 12 0 13 0;
#X connect 13 0 4 1;
#X connect 13 1 10 0;
#X connect 15 0 12 0;
#X connect 16 0 12 0;
#X connect 17 0 14 0;
#X connect 17 0 18 0;
#X connect 21 0 43 0;
#X connect 22 0 27 0;
#X connect 23 0 52 0;
#X connect 23 1 22 1;
#X connect 25 0 59 0;
#X connect 25 1 29 0;
#X connect 27 0 8 1;
#X connect 27 0 24 0;
#X connect 28 0 71 0;
#X connect 28 1 7 1;
#X connect 29 0 35 0;
#X connect 30 0 31 0;
#X connect 30 0 29 1;
#X connect 32 0 30 1;
#X connect 33 0 32 0;
#X connect 33 0 45 0;
#X connect 38 0 23 0;
#X connect 43 0 25 0;
#X connect 44 0 30 0;
#X connect 45 0 44 1;
#X connect 50 0 43 0;
#X connect 50 1 44 0;
#X connect 50 2 32 0;
#X connect 51 0 12 0;
#X connect 52 0 22 0;
#X connect 52 0 40 0;
#X connect 53 0 56 1;
#X connect 56 0 55 0;
#X connect 56 0 55 1;
#X connect 56 1 55 1;
#X connect 56 1 55 0;
#X connect 61 0 11 0;
#X connect 62 0 72 0;
#X connect 64 0 56 0;
#X connect 64 0 75 0;
#X connect 64 0 76 0;
#X connect 65 0 64 0;
#X connect 66 0 64 0;
#X connect 67 0 66 0;
#X connect 71 0 7 0;
#X connect 72 0 49 0;
#X connect 72 0 50 0;
#X connect 73 0 28 0;
#X connect 75 1 2 0;
